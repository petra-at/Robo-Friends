{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","username","id","phone","website","address","company","className","alt","src","city","catchPhrase","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"4PAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCGSC,EAnBH,SAAC,GAA6D,IAA5DC,EAA2D,EAA3DA,KAAMC,EAAqD,EAArDA,MAAOC,EAA8C,EAA9CA,SAAUC,EAAoC,EAApCA,GAAGC,EAAiC,EAAjCA,MAAMC,EAA2B,EAA3BA,QAAQC,EAAmB,EAAnBA,QAAQC,EAAW,EAAXA,QAE1D,OACI,yBAAKC,UAAU,uDACX,4BAAKN,GACL,6BACI,yBAAKO,IAAI,QAAQC,IAAG,+BAA0BP,EAA1B,6CACpB,6BACI,4BAAKH,GACL,2BAAIC,GACJ,2BAAIG,GACJ,2BAAIC,GACJ,2BAAIC,EAAQK,MACZ,qCAAOJ,EAAQP,KAAf,cAAyBO,EAAQK,kBCYtCC,EAxBC,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACd,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAKC,GACjB,OACI,kBAAC,EAAD,CACAC,IAAKD,EACLd,GAAIW,EAAOG,GAAGd,GACdD,SAAWY,EAAOG,GAAGf,SACrBF,KAAMc,EAAOG,GAAGjB,KAChBC,MAAOa,EAAOG,GAAGhB,MACjBG,MAAOU,EAAOG,GAAGb,MACjBE,QAASQ,EAAOG,GAAGX,QACnBC,QAASO,EAAOG,GAAGV,QACnBF,QAASS,EAAOG,GAAGZ,eCDxBc,G,MAdE,SAAC,GACjB,IADkBC,EACnB,EADmBA,aAEnB,OACI,yBAAKZ,UAAU,QACX,2BACIA,UAAU,mCACVa,KAAK,SACLC,YAAY,mBACZC,SAAYH,OCGTI,G,MAZD,SAACC,GACX,OACA,yBAAKC,MAAO,CACJC,UAAU,SACVC,OAAO,kBACPC,OAAO,UAEVJ,EAAMK,YCmBAC,E,kDAxBX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAO,CACRC,UAAS,GAHC,E,8DAOJC,EAAMC,GACpBC,KAAKC,SAAS,CACVJ,UAAS,M,+BAKT,OAAGG,KAAKJ,MAAMC,SAEH,wDAIAG,KAAKX,MAAMK,a,GArBFQ,aCgDbC,E,kDA3CV,aAAc,IAAD,8BACT,gBAaJC,eAAe,SAACC,GAEZ,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAdzC,EAAKZ,MAAQ,CACV,OAAS,GACT,YAAc,IAJR,E,gEAQO,IAAD,OAChBa,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAG,EAAKZ,SAAS,CAACvB,OAAOmC,S,+BAQ/B,IAAD,OAEEC,EAAiBd,KAAKJ,MAAMlB,OAAOqC,QAAO,SAAAC,GAC5C,OAAOA,EAAMpD,KAAKqD,cAAcC,SAAS,EAAKtB,MAAMU,YAAYW,kBAGpE,OAA8B,IAA3BjB,KAAKJ,MAAMlB,OAAOyC,OACV,+CAIP,yBAAK/C,UAAU,MACX,wBAAIA,UAAU,QAAd,gBACA,kBAAC,EAAD,CAAWY,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU1B,OAAQoC,W,GApCvBZ,aCCnBkB,IAASC,OACP,kBAAC,IAAMC,WAAP,KAEE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SPqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAhC,GACLiC,QAAQjC,MAAMA,EAAMkC,c","file":"static/js/main.13bde4af.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card =({name, email ,username, id,phone,website,address,company})=>{\r\n   \r\n    return(\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <h1>{username}</h1>\r\n            <div>\r\n                <img alt=\"Robot\" src={`https://robohash.org/${id}?size=200x200;bgset=bg1;ignoreext=false`}/>\r\n                <div>\r\n                    <h2>{name}</h2>\r\n                    <p>{email}</p>\r\n                    <p>{phone}</p>\r\n                    <p>{website}</p>\r\n                    <p>{address.city}</p>\r\n                    <p>{`${company.name} ~ ${company.catchPhrase}`}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Card; ","import React from 'react'; \r\nimport Card from './Card.js';\r\n\r\nconst CardList =({robots})=>{\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user,i)=>{\r\n                return (\r\n                    <Card \r\n                    key={i}  //keep track of each child element in DOM \r\n                    id={robots[i].id} \r\n                    username= {robots[i].username}\r\n                    name={robots[i].name} \r\n                    email={robots[i].email}\r\n                    phone={robots[i].phone}\r\n                    address={robots[i].address}\r\n                    company={robots[i].company}\r\n                    website={robots[i].website}\r\n                    />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList; ","import React from 'react'; \r\nimport './searchbox.css';\r\n\r\nconst SearchBox =({searchChange})=>\r\n{\r\nreturn(\r\n    <div className=\"pa2 \">\r\n        <input \r\n            className=\"pa3 ba b--green bg-lightest-blue\"\r\n            type=\"search\" \r\n            placeholder=\"Search robots...\"\r\n            onChange = {searchChange}>\r\n        </input>\r\n    </div>\r\n);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll =(props)=>{\r\n    return (\r\n    <div style={{\r\n            overflowY:'scroll',\r\n            border:'5px solid black',\r\n            height:'800px'\r\n            }}>\r\n        {props.children}\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Scroll; ","import React, {Component} from 'react';\r\nimport { render } from 'react-dom';\r\n\r\nclass ErrorBoundary extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state ={\r\n            hasError:false\r\n        }\r\n}\r\n\r\ncomponentDidCatch(error,info){\r\n    this.setState({\r\n        hasError:true\r\n    })\r\n}\r\n\r\n    render(){\r\n        if(this.state.hasError)\r\n        {\r\n            return <h1>Oops there's been error!</h1>\r\n        }\r\n        else\r\n        {\r\n            return this.props.children;\r\n        }\r\n    }\r\n}\r\nexport default ErrorBoundary;","import React ,{Component} from 'react'; \r\nimport CardList from './components/CardList';\r\nimport SearchBox from './components/SearchBox';\r\nimport './containers/App.css';\r\nimport Scroll from './components/Scroll';\r\nimport ErrorBoundary from './components/ErrorBoundary';\r\n\r\n class App extends Component{\r\n     constructor(){\r\n         super(); \r\n         this.state = {\r\n            'robots':[],\r\n            'searchField':''\r\n         }\r\n     }\r\n\r\n     componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users=> this.setState({robots:users}));\r\n     }\r\n\r\n     onSearchChange=(event)=> // use this syntax to avoid issue with state. \r\n     {\r\n         this.setState({searchField :event.target.value});\r\n     }\r\n\r\n    render(){\r\n\r\n        const filteredRobots = this.state.robots.filter(robot=>{\r\n            return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n        });\r\n\r\n        if(this.state.robots.length===0){\r\n            return <h1>No Robo Friends</h1>\r\n        }\r\n        else{\r\n        return(\r\n            <div className=\"tc\">\r\n                <h1 className=\"sega\">Robo Friends</h1>\r\n                <SearchBox searchChange={this.onSearchChange} />\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        <CardList robots={filteredRobots}/>\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n        }\r\n    }\r\n}\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'; \nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    \n    <App></App>\n   \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}